# The metric namespace. This means that all metrics will be prepended with
# the namespace.
namespace: "panoptichain"

runner:
  # The default interval the providers will poll on. If the provider interval is
  # not set, this will be the default that is used. For example, if the interval
  # is set to 30, the RPC providers will update every 30 seconds by default.
  interval: 30

http:
  # The port panoptichain will run on.
  port: 9090

  # The address panoptichain will run on. You may want to change this to
  # "0.0.0.0" or "" if running in a container.
  address: "0.0.0.0"

  # The path where you can see the Prometheus metrics. Using the values above,
  # you'll be able to see the raw metrics at http://localhost:9090/metrics
  path: "/metrics"

# Providers are the main components that are fetching data. They handle all
# state storage and requests to data sources. There are currently five types of
# providers:
#
# - rpc
# - heimdall
# - sensor_network
# - system
# - hash_divergence
#
# Providers usually will have `name`, `label`, and `interval` field.
#
# The name field corresponds to the name of the network you're trying to
# observe. These are the currently known networks. See ./network/network.go for
# details.
#
# - "Polygon Mumbai"
#	- "Heimdall Mumbai"
# - "Polygon Mainnet"
# - "Heimdall Mainnet"
#	- "zkEVM Mainnet"
# - "zkEVM Testnet"
# - "zkEVM Cardona"
# - "zkEVM Bali"
# - "Ethereum"
# - "Sepolia"
# - "Goerli"
#
# If you wish to have a custom network name, you should define those in the
# network section in this file.
#
# The label field helps differentiate providers that share the same network. For
# example, two RPC providers may observe Ethereum, but from different RPC
# endpoints. Here, it would be helpful to use the RPC url as the label to help
# differentiate them.
#
# The interval field is used to override the runner.interval default.
providers:
  # The system provider captures data for the panoptichain level system metrics.
  # Metrics such as panoptichain uptime are captured by this provider. See
  # ./observer/system.go and ./provider/system.go for details.
  system:
    interval: 30

  # RPC providers will fetch data from an Ethereum based RPC server. See
  # ./provider/rpc.go and ./observer/rpc.go for implementation details.
  #
  # RPC providers also have certain contracts they can observe. The contract
  # specific metrics they can observe are:
  #
  # - state_sync_receiver_address   (PoS)
  # - state_sync_sender_address     (PoS)
  # - checkpoint_address            (PoS)
  #
  # - global_exit_root_l2_address   (zkEVM)
  # - zkevm_bridge_address          (zkEVM)
  # - rollup_manager_address        (zkEVM)
  #
  # Some of these contracts are versioned contracts, which means they take in a
  # version along with the contract address. This is because there are slight
  # differences in the ABIs among versions.
  #
  # RPC providers also have the ability to specify configuration for the time to
  # mine metric. It will periodically send transactions to the network and
  # record how long they took to be included in a block. Here's an example RPC
  # provider tailored for the time to mine metric.
  #
  # - name: "zkEVM Cardona"
  #   url: "https://rpc.cardona.zkevm-rpc.com"
  #
  #   For your label, prepending it with something like `ttm` or `time to mine`
  #   will help you differentiate the metrics among the other providers with the
  #   same network.
  #
  #   label: "time-to-mine.zkevm-rpc.com"
  #
  #   Generally, you would use a higher interval than normal to prevent the
  #   wallet funds from being drained too quickly.
  #
  #   interval: 150
  #
  #   time_to_mine:
  #     sender: ""
  #     sender_private_key: ""
  #     receiver: ""
  #     value: 10000000000000 # 0.00001 ether
  #     gas_limit: 21000
  #
  #   The gas price factor specifies how much to multiply the gas price by.
  #   This value will default to 1 if not set.
  #
  #     gas_price_factor: 3
  #
  #   Data is optional field where you can provide the transaction ABI-encoded
  #   data if you wish.
  #
  #     data: ""
  #
  # RPC providers can query the balance of certain accounts. You can specify
  # these accounts like so:
  #
  # accounts:
  #   - "0x123"
  #   - "0x..."
  #
  rpc:
    - name: "X Layer Local"
      url: "http://xlayer-rpc:8545"
      label: "xlayer.local"

    # - name: "X Layer Testnet"
    #   url: "https://testrpc.xlayer.tech/terigon"
    #   label: "xlayer.tech"

    # - name: "Polygon Mainnet"
    #   url: "https://polygon-rpc.com"
    #   label: "polygon-rpc.com"
    #   contracts:
    #     state_sync_receiver_address: "0x0000000000000000000000000000000000001001"

    # - name: "Polygon Mainnet"
    #   url: "https://polygon.rpc.blxrbdn.com"
    #   label: "blxrbdn.com"
    #   contracts:
    #     state_sync_receiver_address: "0x0000000000000000000000000000000000001001"

    # - name: "Polygon Mainnet"
    #   url: "https://polygon.llamarpc.com"
    #   label: "llamarpc.com"
    #   contracts:
    #     state_sync_receiver_address: "0x0000000000000000000000000000000000001001"

    # - name: "Polygon Amoy"
    #   url: "https://rpc-amoy.polygon.technology/"
    #   label: "polygon.technology"
    #   contracts:
    #     state_sync_receiver_address: "0x0000000000000000000000000000000000001001"

    # - name: "zkEVM Mainnet"
    #   url: "https://zkevm-rpc.com"
    #   label: "zkevm-rpc.com"
    #   contracts:
    #     global_exit_root_l2_address: "0xa40D5f56745a118D0906a34E69aeC8C0Db1cB8fA"
    #     zkevm_bridge_address: "0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe"

    # - name: "zkEVM Mainnet"
    #   url: "https://polygon-zkevm.blockpi.network/v1/rpc/public"
    #   label: "blockpi.network"
    #   contracts:
    #     global_exit_root_l2_address: "0xa40D5f56745a118D0906a34E69aeC8C0Db1cB8fA"
    #     zkevm_bridge_address: "0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe"

    # - name: "zkEVM Mainnet"
    #   url: "https://rpc.ankr.com/polygon_zkevm"
    #   label: "ankr.com"
    #   contracts:
    #     global_exit_root_l2_address: "0xa40D5f56745a118D0906a34E69aeC8C0Db1cB8fA"
    #     zkevm_bridge_address: "0x2a3DD3EB832aF982ec71669E178424b10Dca2EDe"

    # - name: "zkEVM Cardona"
    #   url: "https://rpc.cardona.zkevm-rpc.com"
    #   label: "zkevm-rpc.com"
    #   contracts:
    #     global_exit_root_l2_address: "0xa40d5f56745a118d0906a34e69aec8c0db1cb8fa"
    #     zkevm_bridge_address: "0x528e26b25a34a4A5d0dbDa1d57D318153d2ED582"

    # - name: "zkEVM Cardona"
    #   url: "https://polygon-zkevm-cardona.blockpi.network/v1/rpc/public"
    #   label: "blockpi.network"
    #   contracts:
    #     global_exit_root_l2_address: "0xa40d5f56745a118d0906a34e69aec8c0db1cb8fa"
    #     zkevm_bridge_address: "0x528e26b25a34a4A5d0dbDa1d57D318153d2ED582"

    # - name: "zkEVM Bali"
    #   url: "https://rpc.internal.zkevm-rpc.com"
    #   label: "zkevm-rpc.com"
    #   contracts:
    #     global_exit_root_l2_address: "0xa40d5f56745a118d0906a34e69aec8c0db1cb8fa"
    #     zkevm_bridge_address: "0x1348947e282138d8f377b467F7D9c2EB0F335d1f"

    # - name: "Ethereum"
    #   url: "https://eth.llamarpc.com"
    #   label: "llamarpc.com"
    #   contracts:
    #     state_sync_sender_address: "0x28e4F3a7f651294B9564800b2D01f35189A5bFbE"
    #     checkpoint_address: "0x86E4Dc95c7FBdBf52e33D563BbDB00823894C287"
    #     rollup_manager_address: "0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2"

    # - name: "Ethereum"
    #   url: "https://eth.rpc.blxrbdn.com"
    #   label: "blxrbdn.com"
    #   contracts:
    #     state_sync_sender_address: "0x28e4F3a7f651294B9564800b2D01f35189A5bFbE"
    #     checkpoint_address: "0x86E4Dc95c7FBdBf52e33D563BbDB00823894C287"
    #     rollup_manager_address: "0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2"

    # - name: "Ethereum"
    #   url: "https://ethereum-rpc.publicnode.com"
    #   label: "publicnode.com"
    #   contracts:
    #     state_sync_sender_address: "0x28e4F3a7f651294B9564800b2D01f35189A5bFbE"
    #     checkpoint_address: "0x86E4Dc95c7FBdBf52e33D563BbDB00823894C287"
    #     rollup_manager_address: "0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2"

    # - name: "Ethereum"
    #   url: "https://rpc.ankr.com/eth"
    #   label: "ankr.com"
    #   contracts:
    #     state_sync_sender_address: "0x28e4F3a7f651294B9564800b2D01f35189A5bFbE"
    #     checkpoint_address: "0x86E4Dc95c7FBdBf52e33D563BbDB00823894C287"
    #     rollup_manager_address: "0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2"

    # - name: "Ethereum"
    #   url: "https://ethereum.blockpi.network/v1/rpc/public"
    #   label: "blockpi.network"
    #   contracts:
    #     state_sync_sender_address: "0x28e4F3a7f651294B9564800b2D01f35189A5bFbE"
    #     checkpoint_address: "0x86E4Dc95c7FBdBf52e33D563BbDB00823894C287"
    #     rollup_manager_address: "0x5132A183E9F3CB7C848b0AAC5Ae0c4f0491B7aB2"

    # - name: "Sepolia"
    #   url: "https://ethereum-sepolia.publicnode.com"
    #   label: "cardona.publicnode.com"
    #   contracts:
    #     state_sync_sender_address: "0x49E307Fa5a58ff1834E0F8a60eB2a9609E6A5F50"
    #     checkpoint_address: "0xbd07D7E1E93c8d4b2a261327F3C28a8EA7167209"
    #     rollup_manager_address: "0x32d33D5137a7cFFb54c5Bf8371172bcEc5f310ff"

    # - name: "Sepolia"
    #   url: "https://ethereum-sepolia.blockpi.network/v1/rpc/public"
    #   label: "cardona.blockpi.network"
    #   contracts:
    #     state_sync_sender_address: "0x49E307Fa5a58ff1834E0F8a60eB2a9609E6A5F50"
    #     checkpoint_address: "0xbd07D7E1E93c8d4b2a261327F3C28a8EA7167209"
    #     rollup_manager_address: "0x32d33D5137a7cFFb54c5Bf8371172bcEc5f310ff"

    # - name: "Sepolia"
    #   url: "https://ethereum-sepolia.publicnode.com"
    #   label: "bali.publicnode.com"
    #   contracts:
    #     state_sync_sender_address: "0x49E307Fa5a58ff1834E0F8a60eB2a9609E6A5F50"
    #     checkpoint_address: "0xbd07D7E1E93c8d4b2a261327F3C28a8EA7167209"
    #     rollup_manager_address: "0xE2EF6215aDc132Df6913C8DD16487aBF118d1764"

  # The hash divergence provider is a special type of provider, it takes in a
  # list of providers to see if there are differences between a hashes from
  # different RPC providers for a block number.
  hash_divergence:
    interval: 30

  # The heimdall provider gathers data from the heimdall and tendermint APIs.
  # The intervals for these providers are on a shorter interval to prevent
  # missing data. The heimdall APIs only allows us to fetch the current state,
  # not the previous, so a longer interval may skip over some events.
  # heimdall:
  #   - name: "Polygon Mainnet"
  #     tendermint_url: "https://tendermint-api.polygon.technology"
  #     heimdall_url: "https://heimdall-api.polygon.technology"
  #     label: "polygon.technology"
  #     interval: 5

  #   - name: "Polygon Amoy"
  #     tendermint_url: "https://tendermint-api-amoy.polygon.technology"
  #     heimdall_url: "https://heimdall-api-amoy.polygon.technology"
  #     label: "polygon.technology"
  #     interval: 5

  # The sensor network provider fetches data from GCP Datastore. You should
  # remove these providers completely if you're not running this in GCP.
  # sensor_network:
  #   - name: "Polygon Mainnet"
  #     project: "prj-polygonlabs-devtools-dev"
  #     database: ""
  #     label: "sensor-network"

  #   - name: "Polygon Amoy"
  #     project: "prj-polygonlabs-devtools-dev"
  #     database: "amoy"
  #     label: "sensor-network"

  # The exchange rates provider fetches data from the Coinbase API. This is
  # helpful when doing conversion rate computations with your observability
  # backend.
  exchange_rates:
    coinbase_url: https://api.coinbase.com/v2/exchange-rates?currency=
    # `tokens` maps the base currency to a list of quote currencies.
    tokens:
      eth:
        - usd
        - eur
      pol:
        - usd
        - eur

# Observers control what metrics will be recorded. Remove the observer from the
# list to not track them, causing the metrics to be omitted from the metrics
# endpoint. You can keep all observers enabled, it shouldn't cause any problems.
# See ./observer/observer.go for the observer mapping.
observers:
  - "account_balances"
  - "base_fee_per_gas"
  - "block"
  - "block_interval"
  - "bogon_block"
  - "bridge_event"
  - "checkpoint"
  - "claim_event"
  - "deposit_counts"
  - "double_sign"
  - "empty_block"
  - "exchange_rates"
  - "exit_roots"
  - "gas_limit"
  - "gas_used"
  - "hash_divergence"
  - "heimdall_block_interval"
  - "heimdall_checkpoint"
  - "heimdall_height"
  - "heimdall_missed_block_proposal"
  - "heimdall_missed_checkpoint_proposal"
  - "heimdall_missed_milestone_proposal"
  - "heimdall_signature_count"
  - "heimdall_total_transaction_count"
  - "heimdall_transaction_count"
  - "milestone"
  - "missed_block_proposal"
  - "refresh_state_time"
  - "reorg"
  - "sealed_out_of_turn"
  - "sensor_block_events"
  - "sensor_blocks"
  - "sensor_bogon_block"
  - "state_sync"
  - "stolen_block"
  - "system"
  - "time_to_finalized"
  - "time_to_mine"
  - "transaction_cost"
  - "transaction_count"
  - "transaction_gas_fee_cap"
  - "transaction_gas_limit"
  - "transaction_gas_price"
  - "transaction_gas_tip_cap"
  - "transaction_pool"
  - "transaction_value"
  - "trusted_batch"
  - "uncles"
  - "validator_wallet_balance"
  - "zkevm_batches"
  - "rollup_manager"
  - "span"

# Networks allows you to define custom networks. If defined here, you can use it
# in the provider as the `name` field.
networks:
  - name: "X Layer Local"
    chain_id: 195

logs:
  # Pretty print logs. If running in production, you should probably set this to
  # false. If false, it will print as JSON.
  pretty: true

  # Set the log level. The possible log levels are:
  # - "trace"
  # - "debug"
  # - "info"
  # - "warn"
  # - "error"
  # - "panic"
  # - "fatal"
  verbosity: "trace"
