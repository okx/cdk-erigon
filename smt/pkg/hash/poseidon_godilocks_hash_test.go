package hash

import (
	"github.com/stretchr/testify/assert"
	"math/rand"
	"testing"
	"time"
)

func TestPoseidonHashFunc(t *testing.T) {
	tests := []struct {
		input    [8]uint64
		capacity [4]uint64
		result   [4]uint64
	}{
		{
			input:    [8]uint64{5577006791947779410, 8674665223082153551, 15352856648520921629, 13260572831089785859, 3916589616287113937, 6334824724549167320, 9828766684487745566, 10667007354186551956},
			capacity: [4]uint64{0, 0, 0, 0},
			result:   [4]uint64{7986352640330579808, 16698976638447200418, 14099060853601989680, 1806029100513259151},
		},
		{
			input:    [8]uint64{894385949183117216, 11998794077335055257, 4751997750760398084, 7504504064263669287, 11199607447739267382, 3510942875414458836, 12156940908066221323, 4324745483838182873},
			capacity: [4]uint64{0, 0, 0, 0},
			result:   [4]uint64{4912038160490892692, 4103686885524875147, 10541378107520313959, 17279065624757782690},
		},
		{
			input:    [8]uint64{11833901312327420776, 11926759511765359899, 6263450610539110790, 11239168150708129139, 1874068156324778273, 3328451335138149956, 14486903973548550719, 7955079406183515637},
			capacity: [4]uint64{0, 0, 0, 0},
			result:   [4]uint64{7890399244011379224, 3893786354640587971, 13560196409483468805, 2948784903943663078},
		},
		{
			input:    [8]uint64{11926873763676642186, 2740103009342231109, 6941261091797652072, 1905388747193831650, 17204678798284737396, 15649472107743074779, 4831389563158288344, 261049867304784443},
			capacity: [4]uint64{0, 0, 0, 0},
			result:   [4]uint64{14700294369684741534, 14895735373969203815, 16434826207003907392, 17867437290801947189},
		},
		{
			input:    [8]uint64{10683692646452562431, 5600924393587988459, 18218388313430417611, 9956202364908137547, 5486140987150761883, 9768663798983814715, 6382800227808658932, 2781055864473387780},
			capacity: [4]uint64{0, 0, 0, 0},
			result:   [4]uint64{17625602373883346164, 18149609703473926001, 2824810185344003270, 9975387089464755098},
		},
		{
			input:    [8]uint64{10821471013040158923, 4990765271833742716, 14242321332569825828, 11792151447964398879, 13126262220165910460, 14117161486975057715, 2338498362660772719, 2601737961087659062},
			capacity: [4]uint64{0, 0, 0, 0},
			result:   [4]uint64{2691796281516679790, 14584425213549820217, 14318483276994184927, 17940735015359233298},
		},
		{
			input:    [8]uint64{7273596521315663110, 3337066551442961397, 17344948852394588913, 11963748953446345529, 8249030965139585917, 898860202204764712, 9010467728050264449, 9908585559158765387},
			capacity: [4]uint64{0, 0, 0, 0},
			result:   [4]uint64{8150678766998536923, 14721645535435562842, 2012097115710913290, 6143064933387483688},
		},
		{
			input:    [8]uint64{11273630029763932141, 15505210698284655633, 2227583514184312746, 12096659438561119542, 8603989663476771718, 6842348953158377901, 7388428680384065704, 6735196588112087610},
			capacity: [4]uint64{0, 0, 0, 0},
			result:   [4]uint64{9286804905202849659, 7450030268744143082, 2587697138684996149, 603260420412321806},
		},
	}

	for _, test := range tests {
		rst, err := Hash(test.input, test.capacity)
		assert.Nil(t, err, "fail to calculate poseidon hash")

		if rst != test.result {
			t.Errorf("parse doesn't match, expected: %v, got: %v", test.result, rst)
		}
	}
}

func RandCalPoseidonHashFunc() {
	rand.Seed(time.Now().UnixNano())

	input := [8]uint64{rand.Uint64(), rand.Uint64(), rand.Uint64(), rand.Uint64(), rand.Uint64(), rand.Uint64(), rand.Uint64(), rand.Uint64()}
	capacity := [4]uint64{rand.Uint64(), rand.Uint64(), rand.Uint64(), rand.Uint64()}
	Hash(input, capacity)
}

func BenchmarkRandCalculateHash_rust(b *testing.B) {
	for i := 0; i < b.N; i++ {
		RandCalPoseidonHashFunc()
	}
}

func CalPoseidonHashFunc() {
	input := [8]uint64{5577006791947779410, 8674665223082153551, 15352856648520921629, 13260572831089785859, 3916589616287113937, 6334824724549167320, 9828766684487745566, 10667007354186551956}
	capacity := [4]uint64{0, 0, 0, 0}

	Hash(input, capacity)
}

func BenchmarkCalculateHash_rust(b *testing.B) {
	for i := 0; i < b.N; i++ {
		CalPoseidonHashFunc()
	}
}
