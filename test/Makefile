DOCKER_COMPOSE := docker compose -f docker-compose.yml
DOCKER_STATELESS_EXECUTOR := erigon-stateless-executor
DOCKER_STATE_DB := erigon-state-db
DOCKER_SEQ_SENDER := erigon-seqsender
DOCKER_AGGREGATOR := erigon-aggregator
DOCKER_AGGREGATOR_DB := erigon-aggregator-db
DOCKER_BRIDGE_DB := xlayer-bridge-db
DOCKER_BRIDGE_REDIS := xlayer-bridge-redis
DOCKER_BRIDGE_ZOOKEEPER := kafka-zookeeper
DOCKER_BRIDGE_COIN_KAFKA := xlayer-bridge-coin-kafka
DOCKER_BRIDGE_SERVICE := xlayer-bridge-service
DOCKER_BRIDGE_UI := xlayer-bridge-ui
DOCKER_PROVER := erigon-prover
DOCKER_APPROVE := erigon-approve
DOCKER_SEQ := erigon-seq
DOCKER_RPC := erigon-rpc
DOCKER_L1_NETWORK := erigon-mock-l1-network
DOCKER_DATA_AVAILABILITY := xlayer-data-availability
DOCKER_DATA_AVAILABILITY_DB := xlayer-data-availability-db
DOCKER_POOL_DB := erigon-pool-db
DOCKER_POOL_MANAGER := erigon-pool-manager
DOCKER_SIGNER := xlayer-signer

RUN_DOCKER_STATELESS_EXECUTOR := $(DOCKER_COMPOSE) up -d $(DOCKER_STATELESS_EXECUTOR)
RUN_DOCKER_STATE_DB := $(DOCKER_COMPOSE) up -d $(DOCKER_STATE_DB)
RUN_DOCKER_SEQ_SENDER := $(DOCKER_COMPOSE) up -d $(DOCKER_SEQ_SENDER)
RUN_DOCKER_AGGREGATOR := $(DOCKER_COMPOSE) up -d $(DOCKER_AGGREGATOR)
RUN_DOCKER_AGGREGATOR_DB := $(DOCKER_COMPOSE) up -d $(DOCKER_AGGREGATOR_DB)
RUN_DOCKER_BRIDGE_DB := $(DOCKER_COMPOSE) up -d $(DOCKER_BRIDGE_DB)
RUN_DOCKER_BRIDGE_REDIS := $(DOCKER_COMPOSE) up -d $(DOCKER_BRIDGE_REDIS)
RUN_DOCKER_BRIDGE_ZOOKEEPER := $(DOCKER_COMPOSE) up -d $(DOCKER_BRIDGE_ZOOKEEPER)
RUN_DOCKER_BRIDGE_COIN_KAFKA := $(DOCKER_COMPOSE) up -d $(DOCKER_BRIDGE_COIN_KAFKA)
RUN_DOCKER_BRIDGE_SERVICE := $(DOCKER_COMPOSE) up -d $(DOCKER_BRIDGE_SERVICE)
RUN_DOCKER_BRIDGE_UI := $(DOCKER_COMPOSE) up -d $(DOCKER_BRIDGE_UI)
RUN_DOCKER_PROVER := $(DOCKER_COMPOSE) up -d $(DOCKER_PROVER)
RUN_DOCKER_APPROVE := $(DOCKER_COMPOSE) up -d $(DOCKER_APPROVE)
RUN_DOCKER_SEQ := $(DOCKER_COMPOSE) up -d $(DOCKER_SEQ)
RUN_DOCKER_RPC := $(DOCKER_COMPOSE) up -d $(DOCKER_RPC)
RUN_DOCKER_L1_NETWORK := $(DOCKER_COMPOSE) up -d $(DOCKER_L1_NETWORK)
RUN_DOCKER_DATA_AVAILABILITY := $(DOCKER_COMPOSE) up -d $(DOCKER_DATA_AVAILABILITY)
RUN_DOCKER_DATA_AVAILABILITY_DB := $(DOCKER_COMPOSE) up -d $(DOCKER_DATA_AVAILABILITY_DB)
RUN_DOCKER_POOL_DB := $(DOCKER_COMPOSE) up -d $(DOCKER_POOL_DB)
RUN_DOCKER_POOL_MANAGER := $(DOCKER_COMPOSE) up -d $(DOCKER_POOL_MANAGER)
RUN_DOCKER_SIGNER := $(DOCKER_COMPOSE) up -d $(DOCKER_SIGNER)

STOP := $(DOCKER_COMPOSE) down --remove-orphans

.PHONY: run
run: ## Runs a full node
	$(RUN_DOCKER_L1_NETWORK)
	$(RUN_DOCKER_DATA_AVAILABILITY_DB)
	$(RUN_DOCKER_POOL_DB)
	$(RUN_DOCKER_STATE_DB)
	$(RUN_DOCKER_AGGREGATOR_DB)
	sleep 3
	$(RUN_DOCKER_DATA_AVAILABILITY)
	#sleep 3
	#$(RUN_DOCKER_STATELESS_EXECUTOR)
	sleep 3
	$(RUN_DOCKER_PROVER)
	sleep 3
	$(RUN_DOCKER_SEQ)
	sleep 3
	$(RUN_DOCKER_APPROVE)
	sleep 3
	#$(RUN_DOCKER_SIGNER)
	$(RUN_DOCKER_SEQ_SENDER)
	sleep 3
	$(RUN_DOCKER_AGGREGATOR)
	sleep 3
	$(RUN_DOCKER_POOL_MANAGER)
	$(RUN_DOCKER_RPC)

.PHONY: all
all: ## Runs a full node
	$(RUN_DOCKER_L1_NETWORK)
	$(RUN_DOCKER_DATA_AVAILABILITY_DB)
	$(RUN_DOCKER_POOL_DB)
	$(RUN_DOCKER_STATE_DB)
	$(RUN_DOCKER_AGGREGATOR_DB)
	$(RUN_DOCKER_BRIDGE_DB)
	$(RUN_DOCKER_BRIDGE_REDIS)
	$(RUN_DOCKER_BRIDGE_ZOOKEEPER)
	$(RUN_DOCKER_BRIDGE_COIN_KAFKA)
	sleep 3
	$(RUN_DOCKER_DATA_AVAILABILITY)
	#sleep 3
	#$(RUN_DOCKER_STATELESS_EXECUTOR)
	sleep 3
	$(RUN_DOCKER_PROVER)
	sleep 3
	$(RUN_DOCKER_SEQ)
	sleep 3
	$(RUN_DOCKER_APPROVE)
	sleep 3
	$(RUN_DOCKER_POOL_MANAGER)
	$(RUN_DOCKER_RPC)
	sleep 3
	#$(RUN_DOCKER_SIGNER)
	$(RUN_DOCKER_SEQ_SENDER)
	sleep 3
	$(RUN_DOCKER_AGGREGATOR)

	sleep 3
	$(RUN_DOCKER_BRIDGE_SERVICE)
	sleep 3
	$(RUN_DOCKER_BRIDGE_UI)

.PHONY: stop
stop: ## Stops all services
	$(STOP)

.PHONY: min-run
min-run: ## Runs a minimal node
	$(RUN_DOCKER_L1_NETWORK)
	sleep 3
	$(RUN_DOCKER_SEQ)
	sleep 20
	$(RUN_DOCKER_RPC)


.PHONY: test
test: test-1 ## Runs all e2e tests
	echo "Tests passed"
	sleep 3

.PHONY: test-1
test-1: stop run ## Runs group 1 e2e tests checking race conditions
	sleep 3
	docker ps -a
	trap '$(STOP)' EXIT; MallocNanoZone=0 go test -count=1 -failfast -race -v -p 1 -timeout 600s ../ci/e2e-1/...
